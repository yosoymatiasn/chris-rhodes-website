---
import { Image } from 'astro:assets'

interface ImageItem {
  src: ImageMetadata
  alt?: string
  caption?: string
}

interface Props {
  title?: string
  images: ImageItem[]
}

const { title = 'Gallery', images }: Props = Astro.props
---

<section class="px-4 py-8 max-w-screen-xl mx-auto">
  <div class="mb-6 relative">
    <h2 id="title" class="text-3xl font-bold text-center mb-8 tracking-tight">
      {images[0].caption}
    </h2>
    <Image
      id="featured-image"
      src={images[0].src}
      alt={images[0].alt ?? 'Featured photo'}
      class="w-full max-h-[600px] object-contain rounded-xl shadow-xl transition-opacity duration-300"
      format="webp"
      sizes="100vw"
      loading="eager"
    />
  </div>

  <div class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-4">
    {
      images.map((img: ImageItem, index: number) => (
        <button
          type="button"
          class={`thumbnail border border-gray-600  rounded-md overflow-hidden transition-all duration-200`}
          data-src={img.src.src}
          data-alt={img.alt ?? `Photo ${index + 1}`}
          data-caption={img.caption ?? ''}
        >
          <Image
            src={img.src}
            alt={img.alt ?? `Thumbnail ${index + 1}`}
            class="w-full h-24 object-cover"
            format="webp"
            sizes="10vw"
            loading="lazy"
          />
        </button>
      ))
    }
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const title = document.getElementById('title')
      const featuredImg = document.getElementById(
        'featured-image'
      ) as HTMLImageElement | null
      const caption = document.getElementById(
        'featured-caption'
      ) as HTMLParagraphElement | null

      const thumbnails = document.querySelectorAll('.thumbnail')

      thumbnails.forEach((thumbEl) => {
        const thumb = thumbEl as HTMLButtonElement

        thumb.addEventListener('click', () => {
          const src = thumb.dataset.src
          const alt = thumb.dataset.alt
          const captionText = thumb.dataset.caption

          if (featuredImg && src) {
            featuredImg.classList.add('opacity-0')
            setTimeout(() => {
              featuredImg.src = src
              featuredImg.alt = alt ?? ''
              featuredImg.classList.remove('opacity-0')
            }, 150)
          }

          if (title) {
            title.textContent = captionText ?? ''
          }

          thumbnails.forEach((t) => {
            ;(t as HTMLButtonElement).classList.remove('ring-1')
          })
          thumb.classList.add('ring-1')
        })
      })
    })
  </script>
</section>
